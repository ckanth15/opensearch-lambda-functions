AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: OpenSearch Lambda Functions for Document Search

Parameters:
  OpenSearchDomainEndpoint:
    Type: String
    Default: search-kclite-public-alh7skio4hadvkur54ycdv2ily.us-east-1.es.amazonaws.com
    Description: OpenSearch domain endpoint
  
  DocumentStoreBucketName:
    Type: String
    Default: opensearch-document-store-bucket
    Description: S3 bucket for storing PDF documents
    
  IntermediaryStorageBucketName:
    Type: String
    Default: opensearch-intermediary-storage-bucket
    Description: S3 bucket for storing processed text files

Globals:
  Function:
    Timeout: 300
    MemorySize: 512
    Runtime: python3.9

Resources:
  # S3 Buckets - Simple buckets without event notifications
  DocumentStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${DocumentStoreBucketName}-${AWS::AccountId}"

  IntermediaryStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${IntermediaryStorageBucketName}-${AWS::AccountId}"

  # Lambda Layers
  PyPDFLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: pypdf-layer
      Description: PyPDF library for PDF processing
      ContentUri: layers/pypdf/
      CompatibleRuntimes:
        - python3.9
      RetentionPolicy: Delete

  AWSAuthLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: aws-auth-layer
      Description: AWS authentication library
      ContentUri: layers/aws_auth/
      CompatibleRuntimes:
        - python3.9
      RetentionPolicy: Delete

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: OpenSearchAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - es:ESHttpPost
                  - es:ESHttpPut
                  - es:ESHttpGet
                  - es:ESHttpDelete
                  - es:ESHttpHead
                Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/kclite-public/*"
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub "arn:aws:s3:::${DocumentStoreBucketName}-${AWS::AccountId}/*
                  - !Sub "arn:aws:s3:::${IntermediaryStorageBucketName}-${AWS::AccountId}/*"

  # Lambda Function 1: PDFtoTXT - NO S3 EVENTS
  PDFtoTXTFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: pdftotxt
      CodeUri: PDFtoTXT/PDFtoTXT/
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref PyPDFLayer
      Environment:
        Variables:
          TARGET_BUCKET: !Sub "${IntermediaryStorageBucketName}-${AWS::AccountId}"

  # Lambda Function 2: Upload to Search - NO S3 EVENTS
  UploadToSearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: upload-tosearch
      CodeUri: Upload_to_search/Upload to search/
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref AWSAuthLayer
      Environment:
        Variables:
          OPENSEARCH_ENDPOINT: !Ref OpenSearchDomainEndpoint
          AWS_REGION: !Ref AWS::Region

  # API Gateway
  SearchAPI:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: prod
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"

  # Lambda Function 3: Search Gateway
  SearchGatewayFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: search-gateway
      CodeUri: Search_Gateway/Search Gateway/
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref AWSAuthLayer
      Environment:
        Variables:
          OPENSEARCH_ENDPOINT: !Ref OpenSearchDomainEndpoint
          AWS_REGION: !Ref AWS::Region
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref SearchAPI
            Method: any
            Path: /

  # Lambda Function 4: Search Function
  SearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: search-function
      CodeUri: Search_Function/Search Function/
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers:
        - !Ref AWSAuthLayer
      Environment:
        Variables:
          OPENSEARCH_ENDPOINT: !Ref OpenSearchDomainEndpoint
          AWS_REGION: !Ref AWS::Region
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref SearchAPI
            Method: any
            Path: /search

Outputs:
  DocumentStoreBucketName:
    Description: Name of the document store S3 bucket
    Value: !Ref DocumentStoreBucket
    
  IntermediaryStorageBucketName:
    Description: Name of the intermediary storage S3 bucket  
    Value: !Ref IntermediaryStorageBucket
    
  APIGatewayEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${SearchAPI}.execute-api.${AWS::Region}.amazonaws.com/prod"
    
  OpenSearchDomain:
    Description: OpenSearch domain endpoint
    Value: !Ref OpenSearchDomainEndpoint
